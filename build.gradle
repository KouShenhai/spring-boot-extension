import org.springframework.boot.gradle.plugin.SpringBootPlugin

apply plugin: 'java'
apply plugin: 'io.spring.nohttp'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext {
    moduleProjects = subprojects.findAll {
        it.buildFile.exists()
    }
    commonModuleProjects = moduleProjects.findAll {
        it.name.endsWith("-common") || it.name.endsWith("-starter")
    }
    springModuleProjects = moduleProjects - commonModuleProjects
}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/libs-snapshot/' }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.nohttp:nohttp-gradle:${nohttpVersion}"
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:${springJavaFormatPluginVersion}")
    }
}

nohttp {
    allowlistFile = project.file("src/nohttp/allowlist.lines")
    //排除检查文件或者文件夹
    source.exclude "**/bin/**"
    source.exclude "**/build/**"
    source.exclude "**/out/**"
    source.exclude "**/target/**"
}

check {
    dependsOn checkstyleNohttp
}

configure(commonModuleProjects) {
    apply plugin: 'java-library'
}

configure(springModuleProjects) {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
}

configure(allprojects) {
    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/libs-snapshot/' }
    }

    task cleanBuildDir(type: Delete) {
        allprojects.forEach {
            if (!it.buildFile.exists()) {
                delete "${projectDir}/build"
                delete "${projectDir}/out"
                delete "${projectDir}/bin"
            }
        }
    }
}

configure(moduleProjects) {
    apply plugin: 'io.spring.javaformat'
    apply plugin: 'livk.resources.plugin'
    apply from: "$rootDir/gradle/dependency.gradle"

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }
}

test {
    useJUnitPlatform()
}
