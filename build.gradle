plugins {
    id "com.livk.root"
}

ext {
    root = List.of(project(":extension-spring-boot-starters"))
    bom = List.of(project(":livk-boot-dependencies"))
    gradleModuleProjects = (subprojects.findAll { it.buildFile.exists() } - (bom + root))
    commonModuleProjects = gradleModuleProjects.findAll {
        it.name.endsWith("-commons")
                || it.name.endsWith("-starter")
                || it.name.endsWith("-autoconfigure")
                || it.name.endsWith("-core")
                || it.name.endsWith("-extensions")
    }
    springModuleProjects = (gradleModuleProjects - commonModuleProjects)
}

configure(bom) {
    apply plugin: "com.livk.bom"
}

configure(commonModuleProjects) {
    apply plugin: "com.livk.common"
}

configure(springModuleProjects) {
    apply plugin: "com.livk.service"
}

configure(gradleModuleProjects) {
    apply plugin: "com.livk.module"

    dependencies {
        management platform(project(":livk-boot-dependencies"))
        compileProcessor "org.projectlombok:lombok"
        compileProcessor "org.springframework.boot:spring-boot-configuration-processor"
        compileProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"
        testImplementation "org.springframework:spring-tx"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    test {
        systemProperties(System.getProperties())
        def skipExclude = systemProperties.get("exclude") as Boolean
        if (skipExclude) {
            try (def reader = new FileReader("./exclude.txt")
                 def bufferedReader = new BufferedReader(reader)) {
                def lines = bufferedReader.readLines()
                        .stream().map { it.replaceAll("\\.", "/") + ".class" }.toList()
                it.exclude(lines)
            }
        }
    }
}

configure(allprojects) {
    repositories {
        maven { url "https://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven {
            url "http://mirrors.cloud.tencent.com/nexus/repository/maven-public/"
            setAllowInsecureProtocol(true)
        }
    }
}
