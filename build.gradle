plugins {
    id "com.livk.root"
    alias(libs.plugins.asciidoctor.jvm)
}

asciidoctor {
    baseDirFollowsSourceDir()
    sourceDir file("./docs")
    sources {
        include "index.adoc"
    }
    outputDir file("./docs")
}

ext {
    root = Set.of(project(":spring-boot-extension-starters"))
    bom = Set.of(project(":spring-extension-dependencies"))
    gradleModuleProjects = (subprojects.findAll { it.buildFile.exists() } - (bom + root))
}

configure(gradleModuleProjects) {
    apply plugin: "com.livk.module"

    dependencies {
        management platform(project(":spring-extension-dependencies"))
        compileProcessor "org.projectlombok:lombok"
        compileProcessor "org.springframework.boot:spring-boot-configuration-processor"
        compileProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"
        testImplementation "org.springframework:spring-tx"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    test {
        systemProperties(System.getProperties())
        def skipExclude = systemProperties.get("exclude") as Boolean
        if (skipExclude) {
            try (def reader = new FileReader("./exclude.txt")
                 def bufferedReader = new BufferedReader(reader)) {
                def lines = bufferedReader.readLines()
                        .stream().map { it.replaceAll("\\.", "/") + ".class" }.toList()
                exclude(lines)
            }
        }
    }
}

configure(allprojects) {
    repositories {
        maven { url "https://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.aliyun.com/repository/public" }
        maven {
            url "http://mirrors.cloud.tencent.com/nexus/repository/maven-public/"
            allowInsecureProtocol true
        }
    }
}
